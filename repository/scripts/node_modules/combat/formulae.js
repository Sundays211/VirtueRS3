/**
 * 
 */
/* globals Stat, Inv */
var _entity = require('engine/entity');
var _config = require('engine/config');
var stat = require('stat');
var inv = require('inv');
var chat = require('chat');
var util = require('util');

module.exports = (function () {
	return {
		getAccuracy : getAccuracy,
		getHitChance : getHitChance,
		isHit : isHit,
		getMaxHit : getMaxHit
	};
	
	function getAccuracy (entity, target) {//jshint ignore:line
		//TODO: Implement this correctly
		return 0;
	}
	
	function isHit (entity, target) {
		return Math.random() < getHitChance(entity, target);
	}
	
	function getHitChance (entity) {//jshint ignore:line
		//TODO: Implement this correctly
		return 0.5;
	}
	
	function getMaxHit (entity, combatType) {
		//NPC params: 26=combat type (1=melee, 2=ranged, 3=magic)
		switch (combatType) {
		case 1://Melee
			return getMeleeMaxHit(entity);
		case 2://Ranged
			return getRangedMaxHit(entity);
		case 3://Magic
			return getMagicMaxHit(entity);
		default:
			throw "Unsupported combat type: "+combatType;
		}
	}
	
	function getMeleeMaxHit (entity) {
		if (_entity.isPlayer(entity)) {
			var level = stat.getLevel(entity, Stat.STRENGTH);
			var damageBonus = getMeleeDamageBonus(entity);
			var result = level + damageBonus;
			chat.sendDebugMessage(entity, 'Max hit: '+result);
			return result;
		} else {
			return F(_config.npcParam(util.getId(entity), 641) / 10.0);
		}
	}
	
	function getMeleeDamageBonus (player) {
		var bonus = 0.0;
		for (var slot=0; slot<inv.size(Inv.EQUIPMENT); slot++) {
			var objId = inv.getObjId(player, Inv.EQUIPMENT, slot);
			bonus += _config.objParam(objId, 641) / 10.0;
		}
	}
	
	function getRangedMaxHit (entity) {
		if (_entity.isPlayer(entity)) {
			var level = stat.getLevel(entity, Stat.RANGED);
			var damageBonus = getRangedDamageBonus(entity);
			var result = level + damageBonus;
			chat.sendDebugMessage(entity, 'Max hit: '+result);
			return result;
		} else {
			return F(_config.npcParam(util.getId(entity), 643) / 10.0);
		}
	}
	
	function getRangedDamageBonus (player) {
		var bonus = 0.0;
		for (var slot=0; slot<inv.size(Inv.EQUIPMENT); slot++) {
			var objId = inv.getObjId(player, Inv.EQUIPMENT, slot);
			bonus += _config.objParam(objId, 643) / 10.0;
		}
	}
	
	function getMagicMaxHit (entity) {
		if (_entity.isPlayer(entity)) {
			var level = stat.getLevel(entity, Stat.MAGIC);
			var damageBonus = getMagicDamageBonus(entity);
			var result = level + damageBonus;
			chat.sendDebugMessage(entity, 'Max hit: '+result);
			return result;
		} else {
			return F(_config.npcParam(util.getId(entity), 965) / 10.0);
		}
	}
	
	function getMagicDamageBonus (player) {
		var bonus = 0.0;
		for (var slot=0; slot<inv.size(Inv.EQUIPMENT); slot++) {
			var objId = inv.getObjId(player, Inv.EQUIPMENT, slot);
			bonus += _config.objParam(objId, 965) / 10.0;
		}
	}
	
	function F(level) {
		var exp = Math.pow(level, 3);
		var base = 0.0008 * exp;
		var quadlv = 4 * level;
		return base + quadlv + 40;
	}
})();